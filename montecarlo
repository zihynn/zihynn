import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 가상의 주가 데이터를 생성하기 위한 시작 주가와 다른 파라미터 설정
start_price = 100  # 초기 주가
days = 252  # 1년 기준 (거래일 수)
mu = 0.0002  # 평균 수익률 (평균 주가 변화율)
sigma = 0.01  # 변동성 (주가의 표준 편차)
simulations = 1000  # 몬테카를로 시뮬레이션 횟수

# 주가 시뮬레이션 함수
def monte_carlo_simulation(start_price, days, mu, sigma, simulations):
    # 배열 초기화
    price_matrix = np.zeros((simulations, days))
    price_matrix[:, 0] = start_price

    # 주가 변화율 계산
    for t in range(1, days):
        # 무작위로 샘플링된 로그 수익률 적용
        random_shock = np.random.normal(mu, sigma, simulations)
        price_matrix[:, t] = price_matrix[:, t-1] * (1 + random_shock)

    return price_matrix

# 시뮬레이션 실행
simulated_prices = monte_carlo_simulation(start_price, days, mu, sigma, simulations)

# 결과 시각화
plt.figure(figsize=(10,6))
plt.plot(simulated_prices.T, lw=1, alpha=0.1)  # 여러 시뮬레이션 경로
plt.title(f'Monte Carlo Simulation for Stock Prices Over {days} Days')
plt.xlabel('Days')
plt.ylabel('Price')
plt.show()

# 마지막 날의 주가 분포 시각화
plt.figure(figsize=(10,6))
plt.hist(simulated_prices[:, -1], bins=50, color='skyblue', edgecolor='black')
plt.title('Distribution of Simulated Prices on Final Day')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()
